program Pegel;

(*                                                              *)
(*                                                              *)
(* FFT, von Felix und Christof                                  *)
(*                                                              *)
(* mit '+' und '-' kann man die "Helligkeit" der FFT Anzeige    *)
(* ver�ndern                                                    *)
(*                                                              *)
(* mit 'g' und 'h' kann man zwischen "halber" und "ganzer"      *)
(* F�llung des Sample-Puffers w�hlen                            *)
(*                                                              *)
(* mit '8' und '2' kann man die L�nge des Sample-Puffers        *)
(* verdoppeln bzw. halbieren                                    *)
(*                                                              *)
(*                                                              *)

(* Schalter f�r 640x480 (f�r Fiege), sonst immer 800x600 *)
{ $define sixhundret}

uses dos, crt, fastgraf, protimer;

type
  TRat = double;

const
  ati_base     = $220;
  ati_reset    = ati_base + $6;
  ati_Data_in  = ati_base + $A;
  ati_Command  = ati_base + $C;
  ati_Data_out = ati_base + $C;
  ati_Status   = ati_base + $E;
  DSP_OK       = $AA;

{$ifdef sixhundret}
  minx = 0;
  maxx = 639;
  maxy = 479;
{$else}
  minx = 0;
  maxx = 799;
  maxy = 599;
{$endif}

const
  max_n         = 1024;
  N      : word =  256;
  startx : word =    1;
  samplwait     =  100; (* in Protimer-Schritten, bestimmt Sample-Rate *)

var
  i              : integer;
  c              : char;
  verlassen      : boolean;
  sges, tsampl   : TRat;
  time_beginfft  : longint;
  samples,fftnum : longint;

var fr,fi,sampled  :array[1..max_n] of double;
    amp            :array[1..max_n div 2] of integer;
    wrtab, witab   :array[0..max_n] of double;
    NN             :word;
    scale          :double;


function reset_dsp: byte;
  const
    maxcount = 1000;
  var
    count: word;
begin (* reset_dsp *)
  port [ati_reset] := 1;
  delay (1);
  port [ati_reset] := 0;
  count := 0;
  repeat
    inc (count)
  until (count >= maxcount) or (((port [ati_Status]) and $80) <> 0);
  reset_dsp := port [ati_data_in];
end;  (* reset_dsp *)


procedure initbigtab;
  var
    L,M,num : integer;
    WR,WI,A : double;
begin (* initbigtab *)
  num:=0;
  l:=1;
  while (L<N) do begin
    for M:=1 to L do begin
      A :=pi*(1-M)/L;
      WRtab[num]:=cos(A);
      WItab[num]:=sin(A);
      inc(num);
    end;
    l:=2*l;
  end;
  NN:=N-1;
end;  (* initbigtab *)


{$L fft.obj}

procedure fft; external;
procedure amplitude; external;
procedure amplitudelog; external;


procedure initstats;
begin (* initstats *)
  samples := 0;
  tsampl  := 0;
  fftnum  := 0;
  pt_starttimer;
end;  (* initstats *)


procedure Scope;
  const
    lin = 1; (* Skalierungsmodi *)
    log = 2;
  var
    color, mode  : byte;
    c, h, x      : word;
    ende         : boolean;
    ic,xc,xweg,i :  integer;
    time         : longint;
    schwelle     : integer;
    delay        : integer;
    summe        : integer;
begin (* Scope *)
{$ifdef sixhundret}
  initgraph(g640x480);
{$else}
  initgraph(g800x600);
{$endif}

  rect(0,0,640,100,1);


  for i := 0 to 63 do
    SetRGBPalette(       i,      i,  0    ,  0    ); (* schwarz -> rot  *)
  for i := 0 to 63 do
    SetRGBPalette ( 64 + i, 63    ,  0    ,      i); (* rot     -> pink *)
  for i := 0 to 63 do
    SetRGBPalette (128 + i, 63    ,      i, 63 - i); (* pink    -> gelb *)
  for i := 0 to 63 do
    SetRGBPalette (192 + i, 63    , 63    ,      i); (* gelb    -> wei� *)

  SetRGBPalette (  0,  0,  0,  0);
  SetRGBPalette (254,  0, 63,  0); (* Amplitude wurde begrenzt *)
  SetRGBPalette (255, 15, 15, 15); (* obere und untere Markierung *)

  for i := 0 to 255 do rect (i * 3, 0, 3, 5, i);
  line (0, maxy, maxx, maxy, 255);

  mode := lin;
  ende := false;
  xc   := minx;
  xweg := xc + 10;
  scale:= 1/8;


  for i:=1 to N do begin
    fr[i]:=0;
    fi[i]:=0;
  end;

  initstats;

  schwelle := 128*3;

  repeat
    for ic := startx to N do begin
      (* Zeitmessung starten *)
{      time := pt_readtimer;}
      (* Sampling starten *)
      Port[ati_command] := $20;
      (* Auf Bereitstellungung des Samples warten *)
      repeat until (port [ati_Status] and 128) <> 0;
      (* Samplewert einlesen *)
      sampled[ic]  := port [ati_data_in] - 128;
      inc (samples);
      (* Verbleibende Zeit abwarten *)
{      repeat until pt_readtimer >= (time + samplwait);}
    end;


    (* Buffer voll -> Jetzt FFT *)

    (* init *)
    fr:=sampled;
    fillchar(fi,sizeof(fi),#0);
    (* call fft *)
    fft;
    inc(fftnum);

    (* double samples in buffer? *)
    if startx>1 then
      for i:=startx to N do
        sampled[i-startx+1]:=sampled[i];

    (* Berechnen des Betrags des komplexen Ergebnisses *)
    if mode = lin then
      amplitude
    else
      amplitudelog
    ;

    (* plot result *)
    rect (xweg, maxy - (max_n shr 1), 1, (max_n shr 1) - 1, 0);
    PutPixel (xweg, maxy-1, 0);
    for i:=1 to N shr 1 do begin
      c := amp[i];
      if c>253 then c:=254;
      PutPixel (xc, maxy-i, c);
    end;
    PutPixel (xc, maxy - 2 - N shr 1, 255);

    (* Beat Erkennung *)
    summe:=0;
    for i:=1 to 3 do
      summe:=summe+amp[i];

    if (summe>schwelle) then begin
      SetRGBPalette(0,63,0,0);
      delay:=2;
    end else begin
      if (delay=0) then
        SetRGBPalette(0,0,0,0)
      else
        dec(delay);
    end;

    (* Beat Erkennung *)
    summe:=0;
    for i:=7 to 9 do
      summe:=summe+amp[i];

    if (summe>schwelle) then begin
      SetRGBPalette(1,0,63,0);
      delay:=2;
    end else begin
      if (delay=0) then
        SetRGBPalette(1,0,0,0)
      else
        dec(delay);
    end;


    (* next column *)
    inc(xweg); if xweg > maxx then xweg:=minx;
    inc(xc);   if xc   > maxx then xc  :=minx;

    (* Tastaturabfrage *)
    if keypressed then begin
      case readkey of
        '8':
          if N < max_n then begin
            N := N   * 2;
            initbigtab;
            initstats;
          end;
        '2':
          if n > 64 then begin
            N := N div 2;
            initbigtab;
            initstats;
          end;
        'g':
          if startx > 1 then begin
            startx := 1;
            initbigtab;
            initstats;
          end;
        'h':
          if startx = 1 then begin
            startx := N div 2;
            initbigtab;
            initstats;
          end;
        'l':
          if mode = lin then begin
            mode := log;
            scale := scale * 32;
          end else begin
            mode := lin;
            scale := scale / 32;
          end;
        '+': scale:=scale*2;
        '-': scale:=scale/2;
        '9': schwelle := schwelle + 16;
        '3': schwelle := schwelle - 16;
        #27: ende:=true;
      end;
    end;
  until ende;
  closegraph;
end;  (* Scope *)

var
  srate : TRat;

begin
  (* Initialisieren der Sinus/Cosinus-Tabelle *)
  initbigtab;

  (* DSP Reset *)
  if reset_dsp <> dsp_OK then begin
    textmode(c80);
    writeln ('DSP-Reset fehlgeschlagen!');
    c := readkey;
    halt;
  end;

  (* Aufruf der Hauptroutine *)
  Scope;

  (* Statistik ausgeben *)
  sges   := pt_readtimer / tfreq;
  srate  := tfreq / (samplwait + 1);
  tsampl := samples / srate;
  Writeln ('Statistik der zuletzt gew�hlten Einstellung:');
  Write   ('Dauer   : ', round (sges), ' s');
  Writeln (', davon ', 100 * tsampl / sges:4:1, ' % f�r Sampling');
  Write   ('Samples : ', samples);
  WriteLn (' mit ', round (srate), ' Hz');
  WriteLn ('kleinste Frequenz: ', srate / (N shr 1):5:1, ' Hz');
  Writeln ('FFT-Bufferl�nge : ', N);
  WriteLn ('FFTs            : ',fftnum:11);
  WriteLn ('FFTs pro s      : ',fftnum / sges :11:1);
end.


benchmark:
          pt_starttimer;
          save:=fr;
          for i:=1 to 100 do begin
            fr:=save;
            fillchar(fi,sizeof(fi),#0);
            pascal_fft;
          end;
          time:=pt_readtimer;

Ergebnisse:
-----------

47 / s bei N = 512 in Assembler 486/33Mhz
10 / s      "      in Pascal      "


